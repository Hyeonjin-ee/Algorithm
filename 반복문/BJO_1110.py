## (브론즈 1) 더하기 사이클
## 예시) 26부터 시작한다. 2+6 = 8이다. 새로운 수는 68이다. 6+8 = 14이다.
## 새로운 수는 84이다. 8+4 = 12이다. 새로운 수는 42이다. 4+2 = 6이다. 새로운 수는 26이다.
## 위의 예는 4번만에 원래 수로 돌아올 수 있다. 따라서 26의 사이클의 길이는 4이다.
## N이 주어졌을 때, N의 사이클의 길이를 구하는 프로그램을 작성

N = tmp = int(input())
cnt = 0 # 사이클의 길이

while True:
    # 두 자리수 정수를 기준으로
    # N1 : 십의 자리수
    # N2 : 일의 자리수

    N1 = tmp // 10
    N2 = tmp % 10

    newN = N1 + N2  # 각 자리의 수를 더해서 만든 정수
    tmp = int(str(N2) + str(newN % 10))
    # 주어진 수의 가장 오른쪽 자리 수(N2)와
    # 앞서 구한 합의 가장 오른쪽 자리 수(newN % 10) 이어 붙이기

    cnt +=1 # 사이클 돌아오기 까지의 값을 계산하기 위해 +1

    if(newN == tmp):
        break

print(cnt)


## 깨달은 점 :
## 반복문과정을 풀면서 가장 머리를 많이 쓴 문제인 것 같다.
## 처음에는 단순히 값을 str로 받아 십의자리 일의자리를 나누어 생각했는데,
## 입력받은 정수가 한 자리인 경우는 내가 생각한 방식으로는 할 수 없다는 걸 알고
## 몫과 나머지를 떠올려 코드를 다시 작성하게 되었다.

